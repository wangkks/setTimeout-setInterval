setInterval 与 setTimeout 的区别

这两者一般都是以定时器里使用 setTimeout加载一次 而setInterval 多次加载
一般这样的函数常用在我们写一些特效，例如 图片轮播、定时推动数据...常用在这些特效当中
当你写图片轮播的时候，第一步：你需要定义一组变量或一组数组，把图片都装载到数组里面，第二步：我们需要写一个自定义函数，在函数里面可以遍历这个数组，那么这个时候我们就用到了循环，把每个图片动态的操作css去进行一个图片的切换，那么在这个里边呢，我们一般调用的事件呢有：mouseover、mouseout、click这些事件呢我们都有，当鼠标移动上去的时候，可能我们图片呢要发生一些切换，比如说图片定住，当你点击的时候跳到一个固定的地址当中去，所以我们下面就用到比如说.click、.mouseout这样的事件去完成它。同时有可能在页面上创建新的图片元素来操作我们的这个图片轮播效果。所以我们在这个地方调用这样函数的时候我们一律用的是setInterval，因为它是多次加载的，而setTimeout不是。



json数据

是一种轻量级的数据交换格式，它可以和任意的语言去进行交换，包括js、php、java、.net、c语言、这些语言都可以解析或生成我们的json数据，json数据就相当于一个中介，它可以和任意的语言去进行沟通，去进行交互，所以这种格式呢又方便快捷还有作用这样的范围广。是以键值对的形式存在的



ajax原理:

首先我们ajax体现的是异步关系，但什么是异步呢，我们在刷新一个页面的时候，一般浏览器下面都会有一个绿色或者蓝色的进度条，刷一个页面就刷满了，这个就叫同步，同步的意思就是我每次刷新一下页面，刷出了一个请求，服务器那边接到我们的请求，这个数据进行一系列的处理，处理完之后，然后返回到我的浏览器这里，到浏览器这边就成了一段html5,或者是一段html,css3，js这样的一段代码，我的浏览器认识这些代码，然后把这些代码解析成为丰富多彩的页面了。这就是同步：当我整张页面刷新完的时候，页面中所加载到的数据就都是同步的，
异步是什么：当我在页面上触发一些动作的时候，比如说鼠标移动的这么个动作，比如说点击的动作，比如说上下滑屏的动作，这个时候一定是动作触发的，当你触发一些动作的时候，举一个最简单的例子，页面中的tab切换，当你从男装切换到女装的时候，女装的信息再次就会单独的向服务器发出请求，其它的地方都不变，就是当我的男装切换到女装的时候，这个女装的请求就会单独的向服务器发出请求 比如说 我就要女装，她就会从服务器再次接到你这个请求的时候，它会同它那边的数据当中摘选出来关于女装的相关信息，再次给你返回到页面中，记住，就是刷新女装这一块，底下的什么母音用品都没关系，这就是异步。一样的道理，从女装移动到儿童用品上，那儿童的数据传过来。远程单独的去请求，


代码层次上:
	1、考虑浏览器的兼容性
	ie 下创建的是new ActiveXObject("Microsoft.XMLHTTP");
	ff,gogle,...new XMLHttpRequest();创建两个不一样
	2、打开远程请求的这个链接，这个链接的类型是两类，
	get:少快不安全 和 post:多慢安全

,发送请求，调用ajax object.send()发送链接，服务器那边就开始处理你的请求，远程监控 有这么几个状态值,
0->连接成功，（0 － （未初始化）还	没有调用send()方法
 1 － （载入）已调用send()方法，正在发送请求
 2 － （载入完成）send()方法执行完成，已经接收到全部响应内容
 3 － （交互）正在解析响应内容
 4 － （完成）响应内容解析完成，可以在客户端调用了）
到4的时候执行完毕,200的时候执行成功，这样的时候才算完成





如此一来，你应该就能明白readyState的功能，而status实际是一种辅状态判断，只是status更多是服务器方的状态判断。关于status，由于它的状态有几十种，我只列出平时常用的几种：
　　100――客户必须继续发出请求
　　101――客户要求服务器根据请求转换HTTP协议版本
　　200――成功
　　201――提示知道新文件的URL
　　300――请求的资源可在多处得到
　　301――删除请求数据
　　404――没有发现文件、查询或URl
　　500――服务器产生内部错误


AJAX的优缺点
(1).AJAX的优点
      <1>.无刷新更新数据。提高页面加载数据
      <2>.异步与服务器通信。
      <3>.前端和后端负载平衡。
      <4>.基于标准被广泛支持。
      <5>.界面与应用分离。
(2).AJAX的缺点
     <1>.AJAX干掉了Back和History功能，即对浏览器机制的破坏。
     <2>.AJAX的安全问题。在ajax传输数据是容易丢失
     <3>.对搜索引擎支持较弱。
     <4>.破坏程序的异常处理机制。
     <5>.违背URL和资源定位的初衷。
     <6>.AJAX不能很好支持移动设备。
     <7>.客户端过肥，太多客户端代码造成开发上的成本。